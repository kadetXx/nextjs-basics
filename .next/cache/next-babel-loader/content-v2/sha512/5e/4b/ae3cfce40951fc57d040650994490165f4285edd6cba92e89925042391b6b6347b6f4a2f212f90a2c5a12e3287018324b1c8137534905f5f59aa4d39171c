{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Collins\\\\Desktop\\\\.dev\\\\Practice\\\\Frontend Masters\\\\Next Js\\\\next-practice\\\\src\\\\pages\\\\notes\\\\[id].js\";\nimport react from \"react\";\nimport { useRouter } from \"next/router\";\n\nconst Page = ({\n  note\n}) => {\n  const router = useRouter(); // const { id } = router.query;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Hello! This is \", note.title, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => router.push(\"/\"),\n      children: \"Go home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => router.push(\"/notes/[...params]\", \"/notes/kadet/special/note\"),\n      children: \"Open secret notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Page;\nexport async function getServerSideProps({\n  params,\n  req,\n  res\n}) {\n  const response = await fetch(`http://localhost:3000/api/notes/${params.id}`);\n\n  if (!response.ok) {\n    res.writeHeader(302, {\n      Location: \"/notes\"\n    });\n    res.end();\n    return {\n      props: {}\n    };\n  }\n\n  const {\n    data\n  } = await response;\n  console.log(data);\n  return {\n    props: {\n      note: data\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Collins/Desktop/.dev/Practice/Frontend Masters/Next Js/next-practice/src/pages/notes/[id].js"],"names":["react","useRouter","Page","note","router","title","e","push","getServerSideProps","params","req","res","response","fetch","id","ok","writeHeader","Location","end","props","data","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACzB,QAAMC,MAAM,GAAGH,SAAS,EAAxB,CADyB,CAGzB;;AAEA,sBACE;AAAA,4BACE;AAAA,oCAAoBE,IAAI,CAACE,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAGC,CAAD,IAAOF,MAAM,CAACG,IAAP,CAAY,GAAZ,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAGD,CAAD,IAAOF,MAAM,CAACG,IAAP,CAAY,oBAAZ,EAAkC,2BAAlC,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAdD;;AAgBA,eAAeL,IAAf;AAEA,OAAO,eAAeM,kBAAf,CAAkC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,GAAV;AAAeC,EAAAA;AAAf,CAAlC,EAAwD;AAC7D,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCJ,MAAM,CAACK,EAAG,EAA9C,CAA5B;;AAEA,MAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AAChBJ,IAAAA,GAAG,CAACK,WAAJ,CAAgB,GAAhB,EAAqB;AACnBC,MAAAA,QAAQ,EAAE;AADS,KAArB;AAIAN,IAAAA,GAAG,CAACO,GAAJ;AAEA,WAAO;AACLC,MAAAA,KAAK,EAAE;AADF,KAAP;AAGD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMR,QAAvB;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAO;AACLD,IAAAA,KAAK,EAAE;AAAEhB,MAAAA,IAAI,EAAEiB;AAAR;AADF,GAAP;AAGD","sourcesContent":["import react from \"react\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nconst Page = ({ note }) => {\r\n  const router = useRouter();\r\n\r\n  // const { id } = router.query;\r\n\r\n  return (\r\n    <div>\r\n      <h3>Hello! This is {note.title} </h3>\r\n      <button onClick={(e) => router.push(\"/\")}>Go home</button>\r\n      <button onClick={(e) => router.push(\"/notes/[...params]\", \"/notes/kadet/special/note\")}>\r\n        Open secret notes\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n\r\nexport async function getServerSideProps({ params, req, res }) {\r\n  const response = await fetch(`http://localhost:3000/api/notes/${params.id}`);\r\n\r\n  if (!response.ok) {\r\n    res.writeHeader(302, {\r\n      Location: \"/notes\",\r\n    });\r\n\r\n    res.end();\r\n\r\n    return {\r\n      props: {},\r\n    };\r\n  }\r\n\r\n  const { data } = await response;\r\n  \r\n  console.log(data)\r\n  return {\r\n    props: { note: data},\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}