{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport notes from '../../../data/data';\n\nconst getNote = id => notes.find(note => note.id == parseInt(id));\n\nconst handler = nc().get((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.statusCode(404);\n    res.end();\n  }\n\n  res.json({\n    data: note\n  });\n}).patch((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.statusCode(404);\n    res.end();\n  }\n\n  const noteIndex = notes.findIndex(n => n.id === parseInt(req.query.id));\n\n  const updated = _objectSpread(_objectSpread({}, note), req.body);\n\n  notes[noteIndex] = updated;\n  res.json({\n    data: updated\n  });\n}).delete((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.statusCode(404);\n    res.end();\n  }\n\n  const noteIndex = notes.findIndex(n => n.id === parseInt(req.query.id));\n  notes.splice(noteIndex, 1);\n  res.json({\n    data: req.query.id\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Collins/Desktop/.dev/Practice/Frontend Masters/Next Js/next-practice/src/pages/api/notes/[id].js"],"names":["nc","notes","getNote","id","find","note","parseInt","handler","get","req","res","query","statusCode","end","json","data","patch","noteIndex","findIndex","n","updated","body","delete","splice"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,OAAO,GAAGC,EAAE,IAAIF,KAAK,CAACG,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACF,EAAL,IAAWG,QAAQ,CAACH,EAAD,CAAtC,CAAtB;;AAEA,MAAMI,OAAO,GAAGP,EAAE,GACfQ,GADa,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjB,QAAML,IAAI,GAAGH,OAAO,CAACO,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAApB;;AAEA,MAAG,CAACE,IAAJ,EAAU;AACRK,IAAAA,GAAG,CAACE,UAAJ,CAAe,GAAf;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACD;;AAEDH,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEV;AAAP,GAAT;AACD,CAVa,EAWbW,KAXa,CAWP,CAACP,GAAD,EAAMC,GAAN,KAAc;AACnB,QAAML,IAAI,GAAGH,OAAO,CAACO,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAApB;;AAEA,MAAG,CAACE,IAAJ,EAAU;AACRK,IAAAA,GAAG,CAACE,UAAJ,CAAe,GAAf;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACD;;AAGD,QAAMI,SAAS,GAAGhB,KAAK,CAACiB,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAAChB,EAAF,KAASG,QAAQ,CAACG,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAAtC,CAAlB;;AACA,QAAMiB,OAAO,mCAAOf,IAAP,GAAgBI,GAAG,CAACY,IAApB,CAAb;;AAEApB,EAAAA,KAAK,CAACgB,SAAD,CAAL,GAAmBG,OAAnB;AACAV,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEK;AAAP,GAAT;AACD,CAzBa,EA0BbE,MA1Ba,CA0BN,CAACb,GAAD,EAAMC,GAAN,KAAc;AACpB,QAAML,IAAI,GAAGH,OAAO,CAACO,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAApB;;AAEA,MAAG,CAACE,IAAJ,EAAU;AACRK,IAAAA,GAAG,CAACE,UAAJ,CAAe,GAAf;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACD;;AAED,QAAMI,SAAS,GAAGhB,KAAK,CAACiB,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAAChB,EAAF,KAASG,QAAQ,CAACG,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAAtC,CAAlB;AAEAF,EAAAA,KAAK,CAACsB,MAAN,CAAaN,SAAb,EAAwB,CAAxB;AAEAP,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEN,GAAG,CAACE,KAAJ,CAAUR;AAAjB,GAAT;AACD,CAvCa,CAAhB;AAyCA,eAAeI,OAAf","sourcesContent":["import nc from 'next-connect'\r\nimport notes from '../../../data/data'\r\n\r\nconst getNote = id => notes.find(note => note.id == parseInt(id))\r\n\r\nconst handler = nc()\r\n  .get((req, res) => {\r\n    const note = getNote(req.query.id)\r\n\r\n    if(!note) {\r\n      res.statusCode(404);\r\n      res.end()\r\n    }\r\n\r\n    res.json({data: note})\r\n  })\r\n  .patch((req, res) => {\r\n    const note = getNote(req.query.id)\r\n\r\n    if(!note) {\r\n      res.statusCode(404);\r\n      res.end()\r\n    }\r\n\r\n  \r\n    const noteIndex = notes.findIndex(n => n.id === parseInt(req.query.id));\r\n    const updated = {...note, ...req.body}\r\n\r\n    notes[noteIndex] = updated;\r\n    res.json({data: updated})\r\n  })\r\n  .delete((req, res) => {\r\n    const note = getNote(req.query.id);\r\n\r\n    if(!note) {\r\n      res.statusCode(404);\r\n      res.end()\r\n    }\r\n\r\n    const noteIndex = notes.findIndex(n => n.id === parseInt(req.query.id));\r\n\r\n    notes.splice(noteIndex, 1);\r\n\r\n    res.json({data: req.query.id})\r\n  })\r\n\r\nexport default handler"]},"metadata":{},"sourceType":"module"}