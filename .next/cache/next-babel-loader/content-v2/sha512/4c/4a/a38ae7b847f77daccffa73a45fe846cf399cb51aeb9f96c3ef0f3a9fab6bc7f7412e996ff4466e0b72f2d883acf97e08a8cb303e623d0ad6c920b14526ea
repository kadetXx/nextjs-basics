{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport notes from '../../../data/data';\n\nconst getNote = id => notes.find(note => note.id == parseInt(id));\n\nconsole.log(getNote(`Testing ${1610539667243}`));\nconst handler = nc().get((req, res) => {\n  const {\n    id\n  } = req.query;\n\n  if (!id) {\n    res.statusCode(404);\n    res.end();\n  }\n\n  const note = getNote(id);\n  res.json({\n    data: note\n  });\n}).patch((req, res) => {\n  const {\n    id\n  } = req.query;\n\n  if (!id) {\n    res.statusCode(404);\n    res.end();\n  }\n\n  const note = getNote(id);\n  const noteIndex = notes.findIndex(n => n.id === parseInt(id));\n\n  const updated = _objectSpread(_objectSpread({}, note), req.body);\n\n  notes[noteIndex] = updated;\n  res.json({\n    data: updated\n  });\n}).delete((req, res) => {\n  const {\n    id\n  } = req.query;\n\n  if (!id) {\n    res.statusCode(404);\n    res.end();\n  }\n\n  const noteIndex = notes.findIndex(n => n.id === parseInt(id));\n  notes.splice(noteIndex, 1);\n  res.json({\n    data: id\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/Collins/Desktop/.dev/Practice/Frontend Masters/Next Js/next-practice/src/pages/api/notes/[id].js"],"names":["nc","notes","getNote","id","find","note","parseInt","console","log","handler","get","req","res","query","statusCode","end","json","data","patch","noteIndex","findIndex","n","updated","body","delete","splice"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,OAAO,GAAGC,EAAE,IAAIF,KAAK,CAACG,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACF,EAAL,IAAWG,QAAQ,CAACH,EAAD,CAAtC,CAAtB;;AACAI,OAAO,CAACC,GAAR,CAAYN,OAAO,CAAE,WAAU,aAAc,EAA1B,CAAnB;AAEA,MAAMO,OAAO,GAAGT,EAAE,GACfU,GADa,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjB,QAAM;AAAET,IAAAA;AAAF,MAASQ,GAAG,CAACE,KAAnB;;AAEA,MAAG,CAACV,EAAJ,EAAQ;AACNS,IAAAA,GAAG,CAACE,UAAJ,CAAe,GAAf;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACD;;AAED,QAAMV,IAAI,GAAGH,OAAO,CAACC,EAAD,CAApB;AAEAS,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEZ;AAAP,GAAT;AACD,CAZa,EAaba,KAba,CAaP,CAACP,GAAD,EAAMC,GAAN,KAAc;AACnB,QAAM;AAAET,IAAAA;AAAF,MAASQ,GAAG,CAACE,KAAnB;;AAEA,MAAG,CAACV,EAAJ,EAAQ;AACNS,IAAAA,GAAG,CAACE,UAAJ,CAAe,GAAf;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACD;;AAED,QAAMV,IAAI,GAAGH,OAAO,CAACC,EAAD,CAApB;AACA,QAAMgB,SAAS,GAAGlB,KAAK,CAACmB,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAAClB,EAAF,KAASG,QAAQ,CAACH,EAAD,CAAtC,CAAlB;;AACA,QAAMmB,OAAO,mCAAOjB,IAAP,GAAgBM,GAAG,CAACY,IAApB,CAAb;;AAEAtB,EAAAA,KAAK,CAACkB,SAAD,CAAL,GAAmBG,OAAnB;AACAV,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEK;AAAP,GAAT;AACD,CA3Ba,EA4BbE,MA5Ba,CA4BN,CAACb,GAAD,EAAMC,GAAN,KAAc;AACpB,QAAM;AAAET,IAAAA;AAAF,MAASQ,GAAG,CAACE,KAAnB;;AAEA,MAAG,CAACV,EAAJ,EAAQ;AACNS,IAAAA,GAAG,CAACE,UAAJ,CAAe,GAAf;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACD;;AAED,QAAMI,SAAS,GAAGlB,KAAK,CAACmB,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAAClB,EAAF,KAASG,QAAQ,CAACH,EAAD,CAAtC,CAAlB;AAEAF,EAAAA,KAAK,CAACwB,MAAN,CAAaN,SAAb,EAAwB,CAAxB;AAEAP,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEd;AAAP,GAAT;AACD,CAzCa,CAAhB;AA2CA,eAAeM,OAAf","sourcesContent":["import nc from 'next-connect'\r\nimport notes from '../../../data/data'\r\n\r\nconst getNote = id => notes.find(note => note.id == parseInt(id))\r\nconsole.log(getNote(`Testing ${1610539667243}`));\r\n\r\nconst handler = nc()\r\n  .get((req, res) => {\r\n    const { id } = req.query;\r\n\r\n    if(!id) {\r\n      res.statusCode(404);\r\n      res.end()\r\n    }\r\n\r\n    const note = getNote(id)\r\n\r\n    res.json({data: note})\r\n  })\r\n  .patch((req, res) => {\r\n    const { id } = req.query;\r\n\r\n    if(!id) {\r\n      res.statusCode(404);\r\n      res.end()\r\n    }\r\n\r\n    const note = getNote(id)\r\n    const noteIndex = notes.findIndex(n => n.id === parseInt(id));\r\n    const updated = {...note, ...req.body}\r\n\r\n    notes[noteIndex] = updated;\r\n    res.json({data: updated})\r\n  })\r\n  .delete((req, res) => {\r\n    const { id } = req.query;\r\n\r\n    if(!id) {\r\n      res.statusCode(404);\r\n      res.end()\r\n    }\r\n\r\n    const noteIndex = notes.findIndex(n => n.id === parseInt(id));\r\n\r\n    notes.splice(noteIndex, 1);\r\n\r\n    res.json({data: id})\r\n  })\r\n\r\nexport default handler"]},"metadata":{},"sourceType":"module"}